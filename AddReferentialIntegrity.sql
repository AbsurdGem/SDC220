-- Question 1: Enforce referential integrity by adding foreign key constraints
ALTER TABLE ORDERS 
ADD CONSTRAINT fk_orders_user FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE REVIEWS 
ADD CONSTRAINT fk_reviews_user FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE REVIEWS 
ADD CONSTRAINT fk_reviews_product FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTS(PRODUCTCODE);

ALTER TABLE USERLIBRARY 
ADD CONSTRAINT fk_userlibrary_user FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE USERLIBRARY 
ADD CONSTRAINT fk_userlibrary_product FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTS(PRODUCTCODE);

-- Question 2: Display full name and USERNAME of every user who is at least 18 years old
SELECT FIRSTNAME || ' ' || LASTNAME AS FULLNAME, USERNAME
FROM USERBASE
WHERE AGE >= 18;

-- Question 3: Find maximum and average length of USERNAME in USERBASE
SELECT MAX(LENGTH(USERNAME)) AS MAX_USERNAME_LENGTH,
       AVG(LENGTH(USERNAME)) AS AVG_USERNAME_LENGTH
FROM USERBASE;

-- Question 4: Display every security QUESTION starting with 'What is' or 'What was'
SELECT QUESTION
FROM SECURITYQUESTION
WHERE QUESTION LIKE 'What is%' OR QUESTION LIKE 'What was%';

-- Question 5: Display PRODUCTCODE, lowest RATING, and number of reviews per product, ordered by review count
SELECT PRODUCTCODE, MIN(RATING) AS LOWEST_RATING, COUNT(*) AS REVIEW_COUNT
FROM REVIEWS
GROUP BY PRODUCTCODE
ORDER BY REVIEW_COUNT DESC;

-- Question 6: Display PRODUCTCODE ranked at POSITION 1 and number of users with that ranking
SELECT PRODUCTCODE, COUNT(*) AS NUM_USERS
FROM WISHLIST
WHERE POSITION = 1
GROUP BY PRODUCTCODE;

-- Question 7: Display USERID and total amount each user has spent in ORDERS
SELECT USERID, SUM(PRICE * NVL(QUANTITY,1)) AS TOTAL_SPENT
FROM ORDERS
GROUP BY USERID;

-- Question 8: Display gross profits per PURCHASEDATE, sorted by descending profit
SELECT PURCHASEDATE, SUM(PRICE * NVL(QUANTITY,1)) AS GROSS_PROFIT
FROM ORDERS
GROUP BY PURCHASEDATE
ORDER BY GROSS_PROFIT DESC;

-- Question 9: Display PRODUCTCODE and total HOURSPLAYED, top 5 games with most playtime
SELECT PRODUCTCODE, SUM(HOURSPLAYED) AS TOTAL_HOURS
FROM USERLIBRARY
GROUP BY PRODUCTCODE
ORDER BY TOTAL_HOURS DESC
FETCH FIRST 5 ROWS ONLY;

-- Question 10: Create view showing USERID and count of infractions, sorted highest first
CREATE OR REPLACE VIEW USER_INFRACTIONS AS
SELECT USERID, COUNT(*) AS INFRACTION_COUNT
FROM INFRACTIONS
GROUP BY USERID
ORDER BY INFRACTION_COUNT DESC;

-- Question 11: Create view showing USERID, RULENUM, and number of times broken, sorted by USERID
CREATE OR REPLACE VIEW USER_RULE_BREAKS AS
SELECT USERID, RULENUM, COUNT(*) AS TIMES_BROKEN
FROM INFRACTIONS
GROUP BY USERID, RULENUM
ORDER BY USERID;

-- Question 12: Display RULENUM, PENALTY, and number of times that penalty was assigned
SELECT RULENUM, PENALTY, COUNT(*) AS PENALTY_COUNT
FROM INFRACTIONS
GROUP BY RULENUM, PENALTY;

-- Question 13: Display avg, max, min time between DATEUPDATED and DATESUBMITTED for CLOSED tickets
SELECT AVG(DATEUPDATED - DATESUBMITTED) AS AVG_DAYS,
       MAX(DATEUPDATED - DATESUBMITTED) AS MAX_DAYS,
       MIN(DATEUPDATED - DATESUBMITTED) AS MIN_DAYS
FROM TICKETS
WHERE STATUS = 'CLOSED';

-- Question 14: Display EMAIL, ISSUE, and count for NEW tickets, grouped by DATESUBMITTED
SELECT EMAIL, ISSUE, COUNT(*) AS ISSUE_COUNT, DATESUBMITTED
FROM TICKETS
WHERE STATUS = 'NEW'
GROUP BY EMAIL, ISSUE, DATESUBMITTED
ORDER BY ISSUE_COUNT DESC;

-- Question 15: Display users who have FIRSTNAME or LASTNAME in their PASSWORD
SELECT USERID, USERNAME, PASSWORD
FROM USERBASE
WHERE PASSWORD LIKE '%' || FIRSTNAME || '%'
   OR PASSWORD LIKE '%' || LASTNAME || '%';

-- Question 16: Display every PUBLISHER and average PRICE of their products, sorted alphabetically
SELECT PUBLISHER, AVG(PRICE) AS AVG_PRICE
FROM PRODUCTS
GROUP BY PUBLISHER
ORDER BY PUBLISHER;

-- Question 17: Create view showing PRODUCTNAME and PRICE with 25% discount if RELEASEDATE > 5 years ago
CREATE OR REPLACE VIEW OLD_PRODUCTS_DISCOUNT AS
SELECT PRODUCTNAME, PRICE * 0.75 AS DISCOUNTED_PRICE
FROM PRODUCTS
WHERE RELEASEDATE < ADD_MONTHS(SYSDATE, -60);

-- Question 18: Display maximum and minimum PRICE of all products by GENRE
SELECT GENRE, MAX(PRICE) AS MAX_PRICE, MIN(PRICE) AS MIN_PRICE
FROM PRODUCTS
GROUP BY GENRE;

-- Question 19: Create view displaying everything in CHATLOG from last week until now
CREATE OR REPLACE VIEW RECENT_CHATLOG AS
SELECT *
FROM CHATLOG
WHERE DATESENT BETWEEN SYSDATE - 7 AND SYSDATE;

-- Question 20: Create view displaying USERID, DATEASSIGNED, and PENALTY for infractions in last month
CREATE OR REPLACE VIEW RECENT_PENALTIES AS
SELECT USERID, DATEASSIGNED, PENALTY
FROM INFRACTIONS
WHERE PENALTY IS NOT NULL
AND DATEASSIGNED >= ADD_MONTHS(SYSDATE, -1);
